{"version":3,"sources":["index.js"],"names":["score","levelUpCounter","level","food","tickRate","GRID_SIZE","GRID","i","push","DIRECTIONS","UP","BOTTOM","RIGHT","LEFT","DIRECTION_TICKS","x","y","KEY_CODES_MAPPER","38","39","37","40","getRandomNumberFromRange","min","max","Math","floor","random","getRandomCoordinate","isBorder","isPosition","diffX","diffY","isSnake","snakeCoordinates","filter","coordinate","length","getSnakeHead","snake","coordinates","getIsSnakeOutside","getIsSnakeClumy","slice","getSnakeTail","checkLevelUp","levelCheck","spawnScoreBoost","scoreBoost","console","log","getIsSnakeEatingScoreBoost","getCellCs","isGameOver","snack","classA","classGroup","className","cs","applySnakePosition","prevState","isSnakeEating","getIsSnakeEating","isSnakeEatingScoreBoost","playground","direction","snakeHead","snakeTail","snackCoordinate","scoreBoostCoordinate","applyGameOver","doChangeDirection","curDirection","upBottom","leftRight","includes","App","props","onChangeDirection","event","keyCode","setState","state","onTick","this","interval","setInterval","window","addEventListener","clearInterval","removeEventListener","Grid","React","Component","map","Row","key","Cell","ReactDOM","render","document","getElementById"],"mappings":"8GAaA,I,8EARIA,G,MAAQ,GACRC,EAAiB,EACjBC,EAAQ,EACRC,EAAO,EACPC,EAAW,GACTC,EAAY,GACZC,EAAO,GAEJC,EAAI,EAAGA,GAAKF,EAAWE,IAC9BD,EAAKE,KAAKD,GAGZ,IAAME,EAAa,CACjBC,GAAI,KACJC,OAAQ,SACRC,MAAO,QACPC,KAAM,QAGFC,EAAkB,CACtBJ,GAAI,SAACK,EAAGC,GAAJ,MAAW,CAAED,IAAGC,EAAGA,EAAI,IAC3BL,OAAQ,SAACI,EAAGC,GAAJ,MAAW,CAAED,IAAGC,EAAGA,EAAI,IAC/BJ,MAAO,SAACG,EAAGC,GAAJ,MAAW,CAAED,EAAGA,EAAI,EAAGC,MAC9BH,KAAM,SAACE,EAAGC,GAAJ,MAAW,CAAED,EAAGA,EAAI,EAAGC,OAGzBC,EAAmB,CACvBC,GAAI,KACJC,GAAI,QACJC,GAAI,OACJC,GAAI,UAGAC,EAA2B,SAACC,EAAKC,GAAN,OAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAK,GAAMA,IAEzCK,EAAsB,iBACzB,CACCb,EAAGO,EAAyB,EAAGjB,EAAY,GAC3CW,EAAGM,EAAyB,EAAGjB,EAAY,KAGzCwB,EAAW,SAACd,EAAGC,GAAJ,OACT,IAAND,GAAiB,IAANC,GAAWD,IAAMV,GAAaW,IAAMX,GAE3CyB,EAAa,SAACf,EAAGC,EAAGe,EAAOC,GAAd,OACjBjB,IAAMgB,GAASf,IAAMgB,GAEjBC,EAAU,SAAClB,EAAGC,EAAGkB,GAAP,OACdA,EAAiBC,QAAO,SAAAC,GAAU,OAAIN,EAAWM,EAAWrB,EAAGqB,EAAWpB,EAAGD,EAAGC,MAAIqB,QAEhFC,EAAe,SAACC,GAAD,OACnBA,EAAMC,YAAY,IAQdC,EAAoB,SAACF,GAAD,OACxBD,EAAaC,GAAOxB,GAAKV,GACzBiC,EAAaC,GAAOvB,GAAKX,GACzBiC,EAAaC,GAAOxB,GAAK,GACzBuB,EAAaC,GAAOvB,GAAK,GAErB0B,EAAkB,SAACH,GAAD,OACtBN,EAAQK,EAAaC,GAAOxB,EAAGuB,EAAaC,GAAOvB,EAVhC,SAACuB,GAAD,OACnBA,EAAMC,YAAYG,MAAM,GAS8BC,CAAaL,KAE/DM,EAAe,SAACC,GAChBA,EAAa,IACf7C,EAAiB,EACjBG,GAAY,GACZF,GAAS,IAuBP6C,EAAkB,SAAC,GAAyB,IAAxBR,EAAuB,EAAvBA,MAAOS,EAAgB,EAAhBA,WAC/B,OAAI7C,EAAO,GACT8C,QAAQC,IAAI/C,GACZA,EAAO,EACA,GAbwB,SAAC,GAA2B,IAAzBoC,EAAwB,EAAxBA,MAAOS,EAAiB,EAAjBA,WAC3C,GAAIlB,EAAWQ,EAAaC,GAAOxB,EAAGuB,EAAaC,GAAOvB,EAAGgC,EAAWZ,WAAWrB,EAAGiC,EAAWZ,WAAWpB,GAI1G,OAHAhB,GAAS,GAET6C,EADA5C,GAAkB,IAEX,EAWLkD,CAA2B,CAACZ,QAAOS,eAC9B,GAED,GAYJI,EAAY,SAACC,EAAYd,EAAOe,EAAON,EAAYjC,EAAGC,GAA1C,OATP,SAACuC,EAAQC,GACnB,IAAK,IAAIC,KAAaD,EACjBA,EAAWC,KACbF,GAAU,IAAME,GAGnB,OAAOF,EAING,CACE,YACA,CACE,mBAAoB7B,EAASd,EAAGC,GAChC,kBAAmBiB,EAAQlB,EAAGC,EAAGuB,EAAMC,aACvC,kBAAmBV,EAAWf,EAAGC,EAAGsC,EAAMlB,WAAWrB,EAAGuC,EAAMlB,WAAWpB,GACzE,uBAAwBc,EAAWf,EAAGC,EAAGgC,EAAWZ,WAAWrB,EAAGiC,EAAWZ,WAAWpB,GACxF,gBAAiBqC,GAAcvB,EAAWf,EAAGC,EAAGsB,EAAaC,GAAOxB,EAAGuB,EAAaC,GAAOvB,MAI3F2C,EAAqB,SAACC,GAC1B,IAAMC,EAtDiB,SAAC,GAAsB,IAApBtB,EAAmB,EAAnBA,MAAOe,EAAY,EAAZA,MACjC,GAAIxB,EAAWQ,EAAaC,GAAOxB,EAAGuB,EAAaC,GAAOvB,EAAGsC,EAAMlB,WAAWrB,EAAGuC,EAAMlB,WAAWpB,GAKhG,OAJAhB,GAAS,GACTG,GAAQ,EAER0C,EADA5C,GAAkB,IAEX,EAgDa6D,CAAiBF,GACjCG,EAA0BhB,EAAgBa,GAEhDX,QAAQC,IAAIpC,EAAgB8C,EAAUI,WAAWC,WAAYL,EAAUI,YACvE,IAjF2BzB,EAiFrB2B,EAAYpD,EAAgB8C,EAAUI,WAAWC,WACrD3B,EAAasB,EAAUrB,OAAOxB,EAC9BuB,EAAasB,EAAUrB,OAAOvB,GAG1BmD,EAAYN,EACdD,EAAUrB,MAAMC,aAvFOD,EAwFHqB,EAAUrB,OAvF5BC,YAAYG,MAAM,EAAGJ,EAAMC,YAAYH,OAAS,GAyFhD+B,EAAkBP,EACpBjC,IACAgC,EAAUN,MAAMlB,WAEhBiC,EAAuB,CAACtD,GAAI,EAAGC,GAAI,GAQvC,OAPgC,IAA5B+C,EACFM,EAAuBzC,KAEa,IAA7BmC,IACPM,EAAuBT,EAAUZ,WAAWZ,YAGvC,CACLG,MAAO,CACLC,YAAY,CAAE0B,GAAH,mBAAiBC,KAE9Bb,MAAO,CACLlB,WAAYgC,GAEdpB,WAAY,CACVZ,WAAYiC,KAKZC,EAAgB,SAACV,GAAD,MAAgB,CACpCI,WAAY,CACVX,YAAY,KAIVkB,EAAoB,SAACX,EAAWK,GAAZ,OAA0B,WAClD,IAAIO,EAAeZ,EAAUI,WAAWC,UACxChB,QAAQC,IAAIsB,GACZ,IAAIC,EAAW,CAAC,KAAM,UAClBC,EAAY,CAAC,OAAQ,SACzB,OAAKD,EAASE,SAASV,IAAcQ,EAASE,SAASH,IAAmBE,EAAUC,SAASV,IAAcS,EAAUC,SAASH,GACrH,CACLR,WAAY,CACVC,UAAWO,IAKR,CACLR,WAAY,CACVC,gBAMFW,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA+BRC,kBAAoB,SAACC,GACf9D,EAAiB8D,EAAMC,UACzB,EAAKC,SAASV,EAAkB,EAAKW,MAAOjE,EAAiB8D,EAAMC,YAlCpD,EAsCnBG,OAAS,WACP1C,EAAkB,EAAKyC,MAAM3C,QAAUG,EAAgB,EAAKwC,MAAM3C,OAC9D,EAAK0C,SAASX,GACd,EAAKW,SAAStB,IAtClB,EAAKuB,MAAQ,CACXlB,WAAY,CACVC,UAAWxD,EAAWG,MACtByC,YAAY,GAEdd,MAAO,CACLC,YAAa,CAAE,CAACzB,EAAGV,EAAU,EAAGW,EAAGX,EAAU,KAE/CiD,MAAO,CACLlB,WAAYR,KAEdoB,WAAY,CACVZ,WAAY,CAACrB,GAAI,EAAGC,GAAI,KAfX,E,iFAqBjBoE,KAAKC,SAAWC,YAAYF,KAAKD,OAAQ/E,GAEzCmF,OAAOC,iBAAiB,QAASJ,KAAKN,mBAAmB,K,6CAIzDW,cAAcL,KAAKC,UAEnBE,OAAOG,oBAAoB,QAASN,KAAKN,mBAAmB,K,+BAepD,IAAD,EAMHM,KAAKF,MAJP3C,EAFK,EAELA,MACAe,EAHK,EAGLA,MACAN,EAJK,EAILA,WACAgB,EALK,EAKLA,WAGF,OACE,yBAAKP,UAAU,OACb,sCAAYzD,EAAZ,WAA2BE,GAC3B,kBAACyF,EAAD,CACEpD,MAAOA,EACPe,MAAOA,EACPN,WAAYA,EACZK,WAAYW,EAAWX,kB,GA5DfuC,IAAMC,WAmElBF,EAAO,SAAC,GAAD,IAAGtC,EAAH,EAAGA,WAAYd,EAAf,EAAeA,MAAOe,EAAtB,EAAsBA,MAAON,EAA7B,EAA6BA,WAA7B,OACX,6BACG1C,EAAKwF,KAAI,SAAA9E,GAAC,OACT,kBAAC+E,EAAD,CACE/E,EAAGA,EACHgF,IAAKhF,EACLuB,MAAOA,EACPe,MAAOA,EACPN,WAAYA,EACZK,WAAYA,SAKd0C,EAAM,SAAC,GAAD,IAAG1C,EAAH,EAAGA,WAAYd,EAAf,EAAeA,MAAOe,EAAtB,EAAsBA,MAAON,EAA7B,EAA6BA,WAAYhC,EAAzC,EAAyCA,EAAzC,OACV,yBAAKyC,UAAU,YACZnD,EAAKwF,KAAI,SAAA/E,GAAC,OACT,kBAACkF,EAAD,CACElF,EAAGA,EACHC,EAAGA,EACHgF,IAAKjF,EACLwB,MAAOA,EACPe,MAAOA,EACPN,WAAYA,EACZK,WAAYA,SAKd4C,EAAO,SAAC,GAAD,IAAG5C,EAAH,EAAGA,WAAYd,EAAf,EAAeA,MAAOe,EAAtB,EAAsBA,MAAON,EAA7B,EAA6BA,WAAYjC,EAAzC,EAAyCA,EAAGC,EAA5C,EAA4CA,EAA5C,OACX,yBAAKyC,UAAWL,EAAUC,EAAYd,EAAOe,EAAON,EAAYjC,EAAGC,MAIrEkF,IAASC,OAAO,kBAACvB,EAAD,MAASwB,SAASC,eAAe,U","file":"static/js/main.db701515.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nvar score = 0;\nvar levelUpCounter = 0;\nvar level = 1;\nvar food = 0;\nvar tickRate = 10;\nconst GRID_SIZE = 30;\nconst GRID = [];\n\nfor (let i = 0; i <= GRID_SIZE; i++) {\n  GRID.push(i);\n}\n\nconst DIRECTIONS = {\n  UP: 'UP',\n  BOTTOM: 'BOTTOM',\n  RIGHT: 'RIGHT',\n  LEFT: 'LEFT',\n};\n\nconst DIRECTION_TICKS = {\n  UP: (x, y) => ({ x, y: y - 1 }),\n  BOTTOM: (x, y) => ({ x, y: y + 1 }),\n  RIGHT: (x, y) => ({ x: x + 1, y }),\n  LEFT: (x, y) => ({ x: x - 1, y }),\n};\n\nconst KEY_CODES_MAPPER = {\n  38: 'UP',\n  39: 'RIGHT',\n  37: 'LEFT',\n  40: 'BOTTOM',\n};\n\nconst getRandomNumberFromRange = (min, max) =>\n  Math.floor(Math.random() * (max - min +1 ) + min);\n\nconst getRandomCoordinate = () =>\n  ({\n    x: getRandomNumberFromRange(1, GRID_SIZE - 1),\n    y: getRandomNumberFromRange(1, GRID_SIZE - 1),\n  });\n\nconst isBorder = (x, y) =>\n  x === 0 || y === 0 || x === GRID_SIZE || y === GRID_SIZE;\n\nconst isPosition = (x, y, diffX, diffY) =>\n  x === diffX && y === diffY;\n\nconst isSnake = (x, y, snakeCoordinates) =>\n  snakeCoordinates.filter(coordinate => isPosition(coordinate.x, coordinate.y, x, y)).length;\n\nconst getSnakeHead = (snake) =>\n  snake.coordinates[0];\n\nconst getSnakeWithoutStub = (snake) =>\n  snake.coordinates.slice(0, snake.coordinates.length - 1);\n\nconst getSnakeTail = (snake) =>\n  snake.coordinates.slice(1);\n\nconst getIsSnakeOutside = (snake) =>\n  getSnakeHead(snake).x >= GRID_SIZE ||\n  getSnakeHead(snake).y >= GRID_SIZE ||\n  getSnakeHead(snake).x <= 0 ||\n  getSnakeHead(snake).y <= 0;\n\nconst getIsSnakeClumy = (snake) =>\n  isSnake(getSnakeHead(snake).x, getSnakeHead(snake).y, getSnakeTail(snake));\n\nconst checkLevelUp = (levelCheck) => {\n  if (levelCheck > 9) {\n    levelUpCounter = 0;\n    tickRate += 50;\n    level += 1;\n  };\n}\n\nconst getIsSnakeEating = ({ snake, snack }) => {\n  if (isPosition(getSnakeHead(snake).x, getSnakeHead(snake).y, snack.coordinate.x, snack.coordinate.y)) {\n    score += 10;\n    food += 1;\n    levelUpCounter += 1;\n    checkLevelUp(levelUpCounter);\n    return true;\n  };\n}\n\nconst getIsSnakeEatingScoreBoost = ({ snake, scoreBoost }) => {\n  if (isPosition(getSnakeHead(snake).x, getSnakeHead(snake).y, scoreBoost.coordinate.x, scoreBoost.coordinate.y)) {\n    score += 50;\n    levelUpCounter += 5;\n    checkLevelUp(levelUpCounter);\n    return true;    \n  };\n}\n\nconst spawnScoreBoost = ({snake, scoreBoost}) => {\n  if (food > 4) {\n    console.log(food);\n    food = 0;\n    return 1;\n  };\n\n  if (getIsSnakeEatingScoreBoost({snake, scoreBoost})) {\n    return 0;\n  };\n  return -1;\n}\n\nconst cs = (classA, classGroup) => {\n for (var className in classGroup) {\n  if (classGroup[className]) {\n    classA += ' ' + className;\n  };\n };\n return classA;\n};\n\nconst getCellCs = (isGameOver, snake, snack, scoreBoost, x, y) =>\n  cs(\n    'grid-cell',\n    {\n      'grid-cell-border': isBorder(x, y),\n      'grid-cell-snake': isSnake(x, y, snake.coordinates),\n      'grid-cell-snack': isPosition(x, y, snack.coordinate.x, snack.coordinate.y),\n      'grid-cell-scoreBoost': isPosition(x, y, scoreBoost.coordinate.x, scoreBoost.coordinate.y),\n      'grid-cell-hit': isGameOver && isPosition(x, y, getSnakeHead(snake).x, getSnakeHead(snake).y),\n    }\n  );\n\nconst applySnakePosition = (prevState) => {\n  const isSnakeEating = getIsSnakeEating(prevState);\n  const isSnakeEatingScoreBoost = spawnScoreBoost(prevState);\n\n  console.log(DIRECTION_TICKS[prevState.playground.direction], prevState.playground);\n  const snakeHead = DIRECTION_TICKS[prevState.playground.direction](\n    getSnakeHead(prevState.snake).x,\n    getSnakeHead(prevState.snake).y,\n  );\n\n  const snakeTail = isSnakeEating\n    ? prevState.snake.coordinates\n    : getSnakeWithoutStub(prevState.snake);\n\n  const snackCoordinate = isSnakeEating\n    ? getRandomCoordinate()\n    : prevState.snack.coordinate;\n\n  var scoreBoostCoordinate = {x: -1, y: -1};\n  if (isSnakeEatingScoreBoost === 1) {\n    scoreBoostCoordinate = getRandomCoordinate();\n  }\n  else if (isSnakeEatingScoreBoost === -1) {\n    scoreBoostCoordinate = prevState.scoreBoost.coordinate;\n  }\n\n  return {\n    snake: {\n      coordinates: [snakeHead, ...snakeTail],\n    },\n    snack: {\n      coordinate: snackCoordinate,\n    },\n    scoreBoost: {\n      coordinate: scoreBoostCoordinate,\n    }\n  };\n};\n\nconst applyGameOver = (prevState) => ({\n  playground: {\n    isGameOver: true\n  },\n});\n\nconst doChangeDirection = (prevState, direction) => () => {\n  let curDirection = prevState.playground.direction;\n  console.log(curDirection);\n  let upBottom = ['UP', 'BOTTOM'];\n  let leftRight = ['LEFT', 'RIGHT'];\n  if ((upBottom.includes(direction) && upBottom.includes(curDirection)) || (leftRight.includes(direction) && leftRight.includes(curDirection))) {\n    return {\n      playground: {\n        direction: curDirection,\n      }\n    };\n  }\n  else {\n    return {\n      playground: {\n        direction,\n      },\n    };\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playground: {\n        direction: DIRECTIONS.RIGHT,\n        isGameOver: false,\n      },\n      snake: {\n        coordinates: [({x: GRID_SIZE/2, y: GRID_SIZE/2})],\n      },\n      snack: {\n        coordinate: getRandomCoordinate(),\n      },\n      scoreBoost: {\n        coordinate: {x: -1, y: -1},\n      },  \n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.onTick, tickRate);\n\n    window.addEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n\n    window.removeEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  onChangeDirection = (event) => {\n    if (KEY_CODES_MAPPER[event.keyCode]) {\n      this.setState(doChangeDirection(this.state, KEY_CODES_MAPPER[event.keyCode]));\n    }\n  }\n\n  onTick = () => {\n    getIsSnakeOutside(this.state.snake) || getIsSnakeClumy(this.state.snake)\n      ? this.setState(applyGameOver)\n      : this.setState(applySnakePosition);\n  }\n\n  render() {\n    const {\n      snake,\n      snack,\n      scoreBoost,\n      playground,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>Score: {score} Speed: {level}</h1>\n        <Grid\n          snake={snake}\n          snack={snack}\n          scoreBoost={scoreBoost}\n          isGameOver={playground.isGameOver}\n        />\n      </div>\n    );\n  }\n}\n\nconst Grid = ({ isGameOver, snake, snack, scoreBoost }) =>\n  <div>\n    {GRID.map(y =>\n      <Row\n        y={y}\n        key={y}\n        snake={snake}\n        snack={snack}\n        scoreBoost={scoreBoost}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Row = ({ isGameOver, snake, snack, scoreBoost, y }) =>\n  <div className=\"grid-row\">\n    {GRID.map(x =>\n      <Cell\n        x={x}\n        y={y}\n        key={x}\n        snake={snake}\n        snack={snack}\n        scoreBoost={scoreBoost}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Cell = ({ isGameOver, snake, snack, scoreBoost, x, y }) =>\n  <div className={getCellCs(isGameOver, snake, snack, scoreBoost, x, y)} />\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}