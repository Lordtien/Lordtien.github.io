{"version":3,"sources":["index.js"],"names":["GRID","i","push","DIRECTIONS","UP","BOTTOM","RIGHT","LEFT","DIRECTION_TICKS","x","y","KEY_CODES_MAPPER","38","39","37","40","getRandomNumberFromRange","min","max","Math","floor","random","getRandomCoordinate","GRID_SIZE","isBorder","isPosition","diffX","diffY","isSnake","snakeCoordinates","filter","coordinate","length","getSnakeHead","snake","coordinates","getIsSnakeOutside","getIsSnakeClumy","slice","getSnakeTail","getCellCs","isGameOver","snack","classA","classGroup","className","cs","applySnakePosition","prevState","isSnakeEating","getIsSnakeEating","snakeHead","playground","direction","snakeTail","snackCoordinate","applyGameOver","doChangeDirection","App","props","onChangeDirection","event","keyCode","setState","onTick","state","this","interval","setInterval","window","addEventListener","clearInterval","removeEventListener","Grid","React","Component","map","Row","key","Cell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dce176c5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nconst TICK_RATE = 100;\nconst GRID_SIZE = 35;\nconst GRID = [];\n\nfor (let i = 0; i <= GRID_SIZE; i++) {\n  GRID.push(i);\n}\n\nconst DIRECTIONS = {\n  UP: 'UP',\n  BOTTOM: 'BOTTOM',\n  RIGHT: 'RIGHT',\n  LEFT: 'LEFT',\n};\n\nconst DIRECTION_TICKS = {\n  UP: (x, y) => ({ x, y: y - 1 }),\n  BOTTOM: (x, y) => ({ x, y: y + 1 }),\n  RIGHT: (x, y) => ({ x: x + 1, y }),\n  LEFT: (x, y) => ({ x: x - 1, y }),\n};\n\nconst KEY_CODES_MAPPER = {\n  38: 'UP',\n  39: 'RIGHT',\n  37: 'LEFT',\n  40: 'BOTTOM',\n};\n\nconst getRandomNumberFromRange = (min, max) =>\n  Math.floor(Math.random() * (max - min +1 ) + min);\n\nconst getRandomCoordinate = () =>\n  ({\n    x: getRandomNumberFromRange(1, GRID_SIZE - 1),\n    y: getRandomNumberFromRange(1, GRID_SIZE - 1),\n  });\n\nconst isBorder = (x, y) =>\n  x === 0 || y === 0 || x === GRID_SIZE || y === GRID_SIZE;\n\nconst isPosition = (x, y, diffX, diffY) =>\n  x === diffX && y === diffY;\n\nconst isSnake = (x, y, snakeCoordinates) =>\n  snakeCoordinates.filter(coordinate => isPosition(coordinate.x, coordinate.y, x, y)).length;\n\nconst getSnakeHead = (snake) =>\n  snake.coordinates[0];\n\nconst getSnakeWithoutStub = (snake) =>\n  snake.coordinates.slice(0, snake.coordinates.length - 1);\n\nconst getSnakeTail = (snake) =>\n  snake.coordinates.slice(1);\n\nconst getIsSnakeOutside = (snake) =>\n  getSnakeHead(snake).x >= GRID_SIZE ||\n  getSnakeHead(snake).y >= GRID_SIZE ||\n  getSnakeHead(snake).x <= 0 ||\n  getSnakeHead(snake).y <= 0;\n\nconst getIsSnakeClumy = (snake) =>\n  isSnake(getSnakeHead(snake).x, getSnakeHead(snake).y, getSnakeTail(snake));\n\nconst getIsSnakeEating = ({ snake, snack }) =>\n isPosition(getSnakeHead(snake).x, getSnakeHead(snake).y, snack.coordinate.x, snack.coordinate.y);\n\nconst cs = (classA, classGroup) => {\n for (var className in classGroup) {\n  if (classGroup[className]) {\n    classA += ' ' + className;\n  };\n };\n return classA;\n};\n\nconst getCellCs = (isGameOver, snake, snack, x, y) =>\n  cs(\n    'grid-cell',\n    {\n      'grid-cell-border': isBorder(x, y),\n      'grid-cell-snake': isSnake(x, y, snake.coordinates),\n      'grid-cell-snack': isPosition(x, y, snack.coordinate.x, snack.coordinate.y),\n      'grid-cell-hit': isGameOver && isPosition(x, y, getSnakeHead(snake).x, getSnakeHead(snake).y),\n    }\n  );\n\nconst applySnakePosition = (prevState) => {\n  const isSnakeEating = getIsSnakeEating(prevState);\n\n  const snakeHead = DIRECTION_TICKS[prevState.playground.direction](\n    getSnakeHead(prevState.snake).x,\n    getSnakeHead(prevState.snake).y,\n  );\n\n  const snakeTail = isSnakeEating\n    ? prevState.snake.coordinates\n    : getSnakeWithoutStub(prevState.snake);\n\n  const snackCoordinate = isSnakeEating\n    ? getRandomCoordinate()\n    : prevState.snack.coordinate;\n\n  return {\n    snake: {\n      coordinates: [snakeHead, ...snakeTail],\n    },\n    snack: {\n      coordinate: snackCoordinate,\n    },\n  };\n};\n\nconst applyGameOver = (prevState) => ({\n  playground: {\n    isGameOver: true\n  },\n});\n\nconst doChangeDirection = (direction) => () => ({\n  playground: {\n    direction,\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playground: {\n        direction: DIRECTIONS.RIGHT,\n        isGameOver: false,\n      },\n      snake: {\n        coordinates: [({x: 15, y: 15})],\n      },\n      snack: {\n        coordinate: getRandomCoordinate(),\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.onTick, TICK_RATE);\n\n    window.addEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n\n    window.removeEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  onChangeDirection = (event) => {\n    if (KEY_CODES_MAPPER[event.keyCode]) {\n      this.setState(doChangeDirection(KEY_CODES_MAPPER[event.keyCode]));\n    }\n  }\n\n  onTick = () => {\n    getIsSnakeOutside(this.state.snake) || getIsSnakeClumy(this.state.snake)\n      ? this.setState(applyGameOver)\n      : this.setState(applySnakePosition);\n  }\n\n  render() {\n    const {\n      snake,\n      snack,\n      playground,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>Snake!</h1>\n        <Grid\n          snake={snake}\n          snack={snack}\n          isGameOver={playground.isGameOver}\n        />\n      </div>\n    );\n  }\n}\n\nconst Grid = ({ isGameOver, snake, snack }) =>\n  <div>\n    {GRID.map(y =>\n      <Row\n        y={y}\n        key={y}\n        snake={snake}\n        snack={snack}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Row = ({ isGameOver, snake, snack, y }) =>\n  <div className=\"grid-row\">\n    {GRID.map(x =>\n      <Cell\n        x={x}\n        y={y}\n        key={x}\n        snake={snake}\n        snack={snack}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Cell = ({ isGameOver, snake, snack, x, y }) =>\n  <div className={getCellCs(isGameOver, snake, snack, x, y)} />\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}