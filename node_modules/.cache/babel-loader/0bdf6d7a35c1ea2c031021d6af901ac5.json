{"ast":null,"code":"var _jsxFileName = \"/home/lordtien/Pesto/snake/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nconst TICK_RATE = 100;\nconst GRID_SIZE = 35;\nconst GRID = [];\n\nfor (let i = 0; i <= GRID_SIZE; i++) {\n  GRID.push(i);\n}\n\nconst DIRECTIONS = {\n  UP: 'UP',\n  BOTTOM: 'BOTTOM',\n  RIGHT: 'RIGHT',\n  LEFT: 'LEFT'\n};\nconst DIRECTION_TICKS = {\n  UP: (x, y) => ({\n    x,\n    y: y - 1\n  }),\n  BOTTOM: (x, y) => ({\n    x,\n    y: y + 1\n  }),\n  RIGHT: (x, y) => ({\n    x: x + 1,\n    y\n  }),\n  LEFT: (x, y) => ({\n    x: x - 1,\n    y\n  })\n};\nconst KEY_CODES_MAPPER = {\n  38: 'UP',\n  39: 'RIGHT',\n  37: 'LEFT',\n  40: 'BOTTOM'\n};\n\nconst getRandomNumberFromRange = (min, max) => Math.floor(Math.random() * (max - min + 1) + min);\n\nconst getRandomCoordinate = () => ({\n  x: getRandomNumberFromRange(1, GRID_SIZE - 1),\n  y: getRandomNumberFromRange(1, GRID_SIZE - 1)\n});\n\nconst isBorder = (x, y) => x === 0 || y === 0 || x === GRID_SIZE || y === GRID_SIZE;\n\nconst isPosition = (x, y, diffX, diffY) => x === diffX && y === diffY;\n\nconst isSnake = (x, y, snakeCoordinates) => snakeCoordinates.filter(coordinate => isPosition(coordinate.x, coordinate.y, x, y)).length;\n\nconst getSnakeHead = snake => snake.coordinates[0];\n\nconst getSnakeWithoutStub = snake => snake.coordinates.slice(0, snake.coordinates.length - 1);\n\nconst getSnakeTail = snake => snake.coordinates.slice(1);\n\nconst getIsSnakeOutside = snake => getSnakeHead(snake).x >= GRID_SIZE || getSnakeHead(snake).y >= GRID_SIZE || getSnakeHead(snake).x <= 0 || getSnakeHead(snake).y <= 0;\n\nconst getIsSnakeClumy = snake => isSnake(getSnakeHead(snake).x, getSnakeHead(snake).y, getSnakeTail(snake));\n\nconst getIsSnakeEating = ({\n  snake,\n  snack\n}) => isPosition(getSnakeHead(snake).x, getSnakeHead(snake).y, snack.coordinate.x, snack.coordinate.y);\n\nconst cs = (classA, classGroup) => {\n  for (var className in classGroup) {\n    if (classGroup[className]) {\n      classA += ' ' + className;\n    }\n\n    ;\n  }\n\n  ;\n  return classA;\n};\n\nconst getCellCs = (isGameOver, snake, snack, x, y) => cs('grid-cell', {\n  'grid-cell-border': isBorder(x, y),\n  'grid-cell-snake': isSnake(x, y, snake.coordinates),\n  'grid-cell-snack': isPosition(x, y, snack.coordinate.x, snack.coordinate.y),\n  'grid-cell-hit': isGameOver && isPosition(x, y, getSnakeHead(snake).x, getSnakeHead(snake).y)\n});\n\nconst applySnakePosition = prevState => {\n  const isSnakeEating = getIsSnakeEating(prevState);\n  const snakeHead = DIRECTION_TICKS[prevState.playground.direction](getSnakeHead(prevState.snake).x, getSnakeHead(prevState.snake).y);\n  const snakeTail = isSnakeEating ? prevState.snake.coordinates : getSnakeWithoutStub(prevState.snake);\n  const snackCoordinate = isSnakeEating ? getRandomCoordinate() : prevState.snack.coordinate;\n  return {\n    snake: {\n      coordinates: [snakeHead, ...snakeTail]\n    },\n    snack: {\n      coordinate: snackCoordinate\n    }\n  };\n};\n\nconst applyGameOver = prevState => ({\n  playground: {\n    isGameOver: true\n  }\n});\n\nconst doChangeDirection = direction => () => ({\n  playground: {\n    direction\n  }\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeDirection = event => {\n      if (KEY_CODES_MAPPER[event.keyCode]) {\n        this.setState(doChangeDirection(KEY_CODES_MAPPER[event.keyCode]));\n      }\n    };\n\n    this.onTick = () => {\n      getIsSnakeOutside(this.state.snake) || getIsSnakeClumy(this.state.snake) ? this.setState(applyGameOver) : this.setState(applySnakePosition);\n    };\n\n    this.state = {\n      playground: {\n        direction: DIRECTIONS.RIGHT,\n        isGameOver: false\n      },\n      snake: {\n        coordinates: [{\n          x: 15,\n          y: 15\n        }]\n      },\n      snack: {\n        coordinate: getRandomCoordinate()\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.onTick, TICK_RATE);\n    window.addEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    window.removeEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  render() {\n    const _this$state = this.state,\n          snake = _this$state.snake,\n          snack = _this$state.snack,\n          playground = _this$state.playground;\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Snake!\"), React.createElement(Grid, {\n      snake: snake,\n      snack: snack,\n      isGameOver: playground.isGameOver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst Grid = ({\n  isGameOver,\n  snake,\n  snack\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 195\n  },\n  __self: this\n}, GRID.map(y => React.createElement(Row, {\n  y: y,\n  key: y,\n  snake: snake,\n  snack: snack,\n  isGameOver: isGameOver,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 197\n  },\n  __self: this\n})));\n\nconst Row = ({\n  isGameOver,\n  snake,\n  snack,\n  y\n}) => React.createElement(\"div\", {\n  className: \"grid-row\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 208\n  },\n  __self: this\n}, GRID.map(x => React.createElement(Cell, {\n  x: x,\n  y: y,\n  key: x,\n  snake: snake,\n  snack: snack,\n  isGameOver: isGameOver,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 210\n  },\n  __self: this\n})));\n\nconst Cell = ({\n  isGameOver,\n  snake,\n  snack,\n  x,\n  y\n}) => React.createElement(\"div\", {\n  className: getCellCs(isGameOver, snake, snack, x, y),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 222\n  },\n  __self: this\n}); // ========================================\n\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 226\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lordtien/Pesto/snake/src/index.js"],"names":["React","ReactDOM","TICK_RATE","GRID_SIZE","GRID","i","push","DIRECTIONS","UP","BOTTOM","RIGHT","LEFT","DIRECTION_TICKS","x","y","KEY_CODES_MAPPER","getRandomNumberFromRange","min","max","Math","floor","random","getRandomCoordinate","isBorder","isPosition","diffX","diffY","isSnake","snakeCoordinates","filter","coordinate","length","getSnakeHead","snake","coordinates","getSnakeWithoutStub","slice","getSnakeTail","getIsSnakeOutside","getIsSnakeClumy","getIsSnakeEating","snack","cs","classA","classGroup","className","getCellCs","isGameOver","applySnakePosition","prevState","isSnakeEating","snakeHead","playground","direction","snakeTail","snackCoordinate","applyGameOver","doChangeDirection","App","Component","constructor","props","onChangeDirection","event","keyCode","setState","onTick","state","componentDidMount","interval","setInterval","window","addEventListener","componentWillUnmount","clearInterval","removeEventListener","render","Grid","map","Row","Cell","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nconst TICK_RATE = 100;\nconst GRID_SIZE = 35;\nconst GRID = [];\n\nfor (let i = 0; i <= GRID_SIZE; i++) {\n  GRID.push(i);\n}\n\nconst DIRECTIONS = {\n  UP: 'UP',\n  BOTTOM: 'BOTTOM',\n  RIGHT: 'RIGHT',\n  LEFT: 'LEFT',\n};\n\nconst DIRECTION_TICKS = {\n  UP: (x, y) => ({ x, y: y - 1 }),\n  BOTTOM: (x, y) => ({ x, y: y + 1 }),\n  RIGHT: (x, y) => ({ x: x + 1, y }),\n  LEFT: (x, y) => ({ x: x - 1, y }),\n};\n\nconst KEY_CODES_MAPPER = {\n  38: 'UP',\n  39: 'RIGHT',\n  37: 'LEFT',\n  40: 'BOTTOM',\n};\n\nconst getRandomNumberFromRange = (min, max) =>\n  Math.floor(Math.random() * (max - min +1 ) + min);\n\nconst getRandomCoordinate = () =>\n  ({\n    x: getRandomNumberFromRange(1, GRID_SIZE - 1),\n    y: getRandomNumberFromRange(1, GRID_SIZE - 1),\n  });\n\nconst isBorder = (x, y) =>\n  x === 0 || y === 0 || x === GRID_SIZE || y === GRID_SIZE;\n\nconst isPosition = (x, y, diffX, diffY) =>\n  x === diffX && y === diffY;\n\nconst isSnake = (x, y, snakeCoordinates) =>\n  snakeCoordinates.filter(coordinate => isPosition(coordinate.x, coordinate.y, x, y)).length;\n\nconst getSnakeHead = (snake) =>\n  snake.coordinates[0];\n\nconst getSnakeWithoutStub = (snake) =>\n  snake.coordinates.slice(0, snake.coordinates.length - 1);\n\nconst getSnakeTail = (snake) =>\n  snake.coordinates.slice(1);\n\nconst getIsSnakeOutside = (snake) =>\n  getSnakeHead(snake).x >= GRID_SIZE ||\n  getSnakeHead(snake).y >= GRID_SIZE ||\n  getSnakeHead(snake).x <= 0 ||\n  getSnakeHead(snake).y <= 0;\n\nconst getIsSnakeClumy = (snake) =>\n  isSnake(getSnakeHead(snake).x, getSnakeHead(snake).y, getSnakeTail(snake));\n\nconst getIsSnakeEating = ({ snake, snack }) =>\n isPosition(getSnakeHead(snake).x, getSnakeHead(snake).y, snack.coordinate.x, snack.coordinate.y);\n\nconst cs = (classA, classGroup) => {\n for (var className in classGroup) {\n  if (classGroup[className]) {\n    classA += ' ' + className;\n  };\n };\n return classA;\n};\n\nconst getCellCs = (isGameOver, snake, snack, x, y) =>\n  cs(\n    'grid-cell',\n    {\n      'grid-cell-border': isBorder(x, y),\n      'grid-cell-snake': isSnake(x, y, snake.coordinates),\n      'grid-cell-snack': isPosition(x, y, snack.coordinate.x, snack.coordinate.y),\n      'grid-cell-hit': isGameOver && isPosition(x, y, getSnakeHead(snake).x, getSnakeHead(snake).y),\n    }\n  );\n\nconst applySnakePosition = (prevState) => {\n  const isSnakeEating = getIsSnakeEating(prevState);\n\n  const snakeHead = DIRECTION_TICKS[prevState.playground.direction](\n    getSnakeHead(prevState.snake).x,\n    getSnakeHead(prevState.snake).y,\n  );\n\n  const snakeTail = isSnakeEating\n    ? prevState.snake.coordinates\n    : getSnakeWithoutStub(prevState.snake);\n\n  const snackCoordinate = isSnakeEating\n    ? getRandomCoordinate()\n    : prevState.snack.coordinate;\n\n  return {\n    snake: {\n      coordinates: [snakeHead, ...snakeTail],\n    },\n    snack: {\n      coordinate: snackCoordinate,\n    },\n  };\n};\n\nconst applyGameOver = (prevState) => ({\n  playground: {\n    isGameOver: true\n  },\n});\n\nconst doChangeDirection = (direction) => () => ({\n  playground: {\n    direction,\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playground: {\n        direction: DIRECTIONS.RIGHT,\n        isGameOver: false,\n      },\n      snake: {\n        coordinates: [({x: 15, y: 15})],\n      },\n      snack: {\n        coordinate: getRandomCoordinate(),\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.onTick, TICK_RATE);\n\n    window.addEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n\n    window.removeEventListener('keyup', this.onChangeDirection, false);\n  }\n\n  onChangeDirection = (event) => {\n    if (KEY_CODES_MAPPER[event.keyCode]) {\n      this.setState(doChangeDirection(KEY_CODES_MAPPER[event.keyCode]));\n    }\n  }\n\n  onTick = () => {\n    getIsSnakeOutside(this.state.snake) || getIsSnakeClumy(this.state.snake)\n      ? this.setState(applyGameOver)\n      : this.setState(applySnakePosition);\n  }\n\n  render() {\n    const {\n      snake,\n      snack,\n      playground,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <h1>Snake!</h1>\n        <Grid\n          snake={snake}\n          snack={snack}\n          isGameOver={playground.isGameOver}\n        />\n      </div>\n    );\n  }\n}\n\nconst Grid = ({ isGameOver, snake, snack }) =>\n  <div>\n    {GRID.map(y =>\n      <Row\n        y={y}\n        key={y}\n        snake={snake}\n        snack={snack}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Row = ({ isGameOver, snake, snack, y }) =>\n  <div className=\"grid-row\">\n    {GRID.map(x =>\n      <Cell\n        x={x}\n        y={y}\n        key={x}\n        snake={snake}\n        snack={snack}\n        isGameOver={isGameOver}\n      />\n    )}\n  </div>\n\nconst Cell = ({ isGameOver, snake, snack, x, y }) =>\n  <div className={getCellCs(isGameOver, snake, snack, x, y)} />\n\n// ========================================\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}